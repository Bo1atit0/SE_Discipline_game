Investigate and explain how pointers contribute to dynamic memory allocation and deallocation in programming.

To understand "Dynamic memory allocation, " I think I should talk a little about "Static memory allocation"
When we declare variables or arrays when writing our program, our computer automatically allocates space for this variable from all the many memory locations it has(one of the reasons why indicating a data type in some programming languages before the variable name(eg: int var_name) is important is that the different data types take up different amounts of spaces in memory). It's like you're trying to lodge in a hotel and you're just given one room out of the plentiful amount of rooms in the hotel, so we can rightly say that when we declare variables we're telling the compiler to put the variables into one of the numerous spaces(or using the hotel analogy, one of the numerous rooms it has) BEFORE THE PROGRAM IS EXECUTED.
But what if we do not know the amount of space we will need for our variable or array, what if we needed a way for the program to take the amount of space it needs while it is running, That is where Dynamic allocation comes into play. Dynamic memory allocation is like asking the computer to set aside some memory for you during runtime(while your program is running) and one major advantage of using this type of memory allocation is the flexibility it awards us, you can assign space in memory without knowing the size of your variable or array in advance. But remember dynamically allocated memory is borrowed from the computer and you have to give it back. But how?
Memory Deallocation: when you take something you put it back so you can use it again when you need it. That is the concept memory deallocation follows. When you dynamically allocate memory in your program it is your responsibility to free or release said memory to avoid memory leaks in languages like C(In C programming you manage memory manually) and to make the best use of your computer's resources. 
    Now how do pointers contribute to dynamic memory allocation and deallocation in programming?
Pointers play a big part in dynamic memory allocation and deallocation. 
Pointers store memory addresses, these memory addresses are the return values of functions like "malloc". These functions dynamically allocate memory during a program's execution. So without pointers, it might be a bit difficult for us to get the memory address allocated for the variables in our programs.
What about memory deallocation, when we're done using the dynamically allocated memories we use functions like "free" to release them. To be able to use this function we need to pass a pointer to the memory address we want to free as an argument.
    So basically, pointers make it easy for us to use our dynamically allocated memory by pointing to the location where data is stored. They make our programs flexible by allowing us to allocate, access, modify, and deallocate memory whenever we need to during runtime. But always remember to use 'pointers' and 'dynamic memory allocation' responsibly to avoid memory leaks.
 
 