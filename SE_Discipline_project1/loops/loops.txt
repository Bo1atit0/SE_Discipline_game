Explore the concept of loop control statements (break and continue) and provide examples demonstrating their application in program flow.

loops are control flow structures that help us execute a block of code multiple times while limiting the amount of times we write a line of code. This concept helps us write efficient code and improves the readability in our codes

loop control statements: these change the normal flow of a loop by, they help us manipulate the normal way a loop works by either 'skipping iterations', 'breaking out of the loop before it's supposed to end', or 'jumping to another part of the loop'

Examples:
break: this statement is used to terminate a loop prematurely. When this 'break' statement is encountered inside a loop, it ends that loop, and control is transferred to the statement immediately after the loop
*****
int main()
{
for (i = 0; i < n; i++)
{
if (i == 3)
{
break; // control leave the loop when i == 3
}
printf("control still in loop");
}
printf("control transfered out of the loop");
}
*****

continue statement: used to skip the rest of the code inside the loop for the current iteration and move to the next iteration of the loop.
*****
#include <stdio.h>

int main() 
{
for (int i = 0; i < 5; i++) 
{
if (i == 2) // when i iterate to 2, the printf statement is                     skipped 
{
continue;
}
printf("%d\n", i);
}
return 0;
}
*****